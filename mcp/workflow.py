import json
def get_workflow():
    ############################### Scheduler ###############################
    start_scheduler_task={
        "Type": "Task",
        "Resource": "arn:aws:states:::aws-sdk:ecs:runTask",
        "Parameters":{
            "Cluster": "${cluster}",
            "Count": 1,
            "NetworkConfiguration": {
                "AwsvpcConfiguration": {
                    "Subnets": ["${subnet1}", "${subnet2}"],
                    "SecurityGroups": ["${securitygroup}"],
                    "AssignPublicIp": "ENABLED"
                }
            },
            "Overrides": {
                "ContainerOverrides": [
                    {
                        "Name": "dask",
                        "Command": ["dask-scheduler","--port","8000","--dashboard-address","8001"]}
                ]
            },
            "TaskDefinition": "${taskdefinition}"
        },
        "ResultSelector":{
          "SchedulerArn.$": "$.Tasks[0].TaskArn",
          "DesiredStatus": {
              "Value.$": "$.Tasks[0].DesiredStatus"
          }
        },
        "ResultPath": "$.Scheduler"
    }
    
    stop_scheduler_task = {
        "Type": "Task",
        "Resource": "arn:aws:states:::aws-sdk:ecs:stopTask",
        "InputPath": "$.Scheduler",
        "Parameters":{
            "Cluster": "${cluster}",
            "Task.$": "$.SchedulerArn",
            "Reason": "Stoped by stepfunction"
        },
        "ResultSelector": {
          "Value.$": "$.Task.DesiredStatus"
        },
        "ResultPath": "$.Scheduler.DesiredStatus"
    }
    
    get_scheduler_status={
        "Type": "Task",
        "Resource": "arn:aws:states:::aws-sdk:ecs:describeTasks",
        "InputPath": "$.Scheduler",
        "Parameters":{
            "Cluster": "${cluster}",
            "Tasks.$": "States.Array($.SchedulerArn)"
        },
        "ResultSelector": {
          "Value.$": "$.Tasks[0].LastStatus"
        },
        "ResultPath": "$.Scheduler.Status"
    }
    
    wait_10_seconds = {
        "Type": "Wait",
        "Seconds": 10,
    }
    
    is_scheduler_running={
        "Variable": "$.Scheduler.Status.Value",
        "StringEquals": "RUNNING"
    }
    
    is_scheduler_stoped={
        "Variable": "$.Scheduler.Status.Value",
        "StringEquals": "STOPPED"
    }
    
    get_scheduler_endpoint={
        "Type": "Task",
        "Resource": "arn:aws:states:::aws-sdk:ecs:describeTasks",
        "InputPath": "$.Scheduler",
        "Parameters":{
            "Cluster": "${cluster}",
            "Tasks.$": "States.Array($.SchedulerArn)"
        },
        "ResultSelector": {
          "Value.$": "States.Format('tcp://{}:8000', $.Tasks[0].Containers[0].NetworkInterfaces[0].PrivateIpv4Address)"
        },
        "ResultPath": "$.Scheduler.Endpoint"   
    }
    ############################### Scheduler ###############################
    
    wait_300_seconds = {
        "Type": "Wait",
        "Seconds": 300,
    }
    
    ############################### Workers ###############################
    start_workers_tasks={
        "Type": "Task",
        "Resource": "arn:aws:states:::aws-sdk:ecs:runTask",
        "Parameters":{
            "Cluster": "${cluster}",
            "Count": 1,
            "NetworkConfiguration": {
                "AwsvpcConfiguration": {
                    "Subnets": ["${subnet1}", "${subnet2}"],
                    "SecurityGroups": ["${securitygroup}"],
                    "AssignPublicIp": "ENABLED"
                }
            },
            "Overrides": {
                "ContainerOverrides": [
                    {
                        "Name": "dask",
                        "Command.$": "States.Array('dask-worker', '--dashboard-address', '8000', '--nanny-port', '8001:8100', '--worker-port', '8100:8200', $.Scheduler.Endpoint.Value)"
                    }
                ]
            },
            "TaskDefinition": "${taskdefinition}"
        },
        "ResultSelector":{
          "WorkersArn.$": "$.Tasks[*].TaskArn",
          "Status": {
             "Value.$": "$.Tasks[*].LastStatus",
          },
          "DesiredStatus": {
              "Value.$": "$.Tasks[*].DesiredStatus"
          }
        },
        "ResultPath": "$.Workers"
    }
    
    get_worker_status={
        "Type": "Task",
        "Resource": "arn:aws:states:::aws-sdk:ecs:describeTasks",
        "Parameters":{
            "Cluster": "${cluster}",
            "Tasks.$": "States.Array($.TaskArn)"
        },
        "ResultSelector": {
          "Value.$": "$.Tasks[0].LastStatus"
        },
        "ResultPath": "$.Status"
    }
    
    is_worker_running={
        "Variable": "$.Status.Value",
        "StringEquals": "RUNNING"
    }
    
    validate_workers={
          "Type": "Map",
          "InputPath": "$.Workers",
          "ItemsPath": "$.WorkersArn",
          "MaxConcurrency": 1,
          "Parameters": {
            "TaskArn.$": "$$.Map.Item.Value",
            "Cluster": "${cluster}"
          },
          "Iterator": {
              "StartAt": "get worker status",
              "States": {
                  "get worker status": {
                      **get_worker_status,
                      "Next": "is worker running"
                  },
                  "is worker running": {
                    "Type": "Choice",
                    "Default": "wait 10 seconds to get worker running status",
                    "Choices": [
                        {
                            **is_worker_running,
                            "Next": "worker is running"
                        }
                    ]
                    
                },
                "wait 10 seconds to get worker running status": {
                    **wait_10_seconds,
                    "Next": "get worker status"
                },
                "worker is running": {
                    "Type": "Pass",
                    "End": True
                }
              }
          },
          "ResultSelector": {
              "Value.$": "$[*].Status.Value"
           },
          "ResultPath": "$.Workers.Status"
          
    }
    
    ############################### Workers ###############################
    
    ############################### Definition ###############################
    workflowdefinition={
        "StartAt": "skip scheduler?",
        "States": {
            "skip scheduler?": {
                "Type": "Choice",
                "Default": "start scheduler task",
                "Choices": [
                    {
                        "And": [
                            {
                                "Variable": "$.SkipScheduler",
                                "IsPresent": True
                            },
                            {
                                "Variable": "$.SkipScheduler",
                                "IsBoolean": True
                            },
                            {
                                "Variable": "$.SkipScheduler",
                                "BooleanEquals": True
                            }
                        ],
                        "Next": "skip workers?"
                    }
                ]
                
            },
            "start scheduler task":{ 
                **start_scheduler_task,
                "Next": "get scheduler running status"
            },
            "get scheduler running status": {
                **get_scheduler_status,
                "Next": "is scheduler running"
            },
            "wait 10 seconds to get scheduler running status": {
                **wait_10_seconds,
                "Next": "get scheduler running status"
            },
            "is scheduler running": {
                "Type": "Choice",
                "Default": "wait 10 seconds to get scheduler running status",
                "Choices": [
                    {
                        **is_scheduler_running,
                        "Next": "get scheduler endpoint"
                    }
                ]
                
            },
            "get scheduler endpoint": {
                **get_scheduler_endpoint,
                "Next": "skip workers?"
            },
            "skip workers?": {
                "Type": "Choice",
                "Default": "start workers tasks",
                "Choices": [
                    {
                        "And": [
                            {
                                "Variable": "$.SkipWorkers",
                                "IsPresent": True
                            },
                            {
                                "Variable": "$.SkipWorkers",
                                "IsBoolean": True
                            },
                            {
                                "Variable": "$.SkipWorkers",
                                "BooleanEquals": True
                            }
                        ],
                        "Next": "wait 300 seconds"
                    }
                ]
                
            },
            "start workers tasks": {
                **start_workers_tasks,
                "Next": "validate workers"
            },
            "validate workers": {
                **validate_workers,
                "Next": "wait 300 seconds"
            },
            "wait 300 seconds": {
                **wait_300_seconds,
                "Next": "skip scheduler stop?"
            },
            "skip scheduler stop?": {
                "Type": "Choice",
                "Default": "stop scheduler task",
                "Choices": [
                    {
                        "And": [
                            {
                                "Variable": "$.SkipSchedulerStop",
                                "IsPresent": True
                            },
                            {
                                "Variable": "$.SkipSchedulerStop",
                                "IsBoolean": True
                            },
                            {
                                "Variable": "$.SkipSchedulerStop",
                                "BooleanEquals": True
                            }
                        ],
                        "Next": "success"
                    }
                ]
                
            },
            "stop scheduler task": {
                **stop_scheduler_task,
                "Next": "get scheduler stop status"
            },
            "get scheduler stop status": {
                **get_scheduler_status,
                "Next": "is scheduler stoped"
            },
            "is scheduler stoped": {
                "Type": "Choice",
                "Default": "wait 10 seconds to get scheduler stop status",
                "Choices": [
                    {
                        **is_scheduler_stoped,
                        "Next": "success"
                    }
                ]
                
            },
            "wait 10 seconds to get scheduler stop status": {
                **wait_10_seconds,
                "Next": "get scheduler stop status"
            },
            "success": {
                "Type": "Succeed"
            }
        }
    }
    ############################### Definition ###############################
    
    return json.dumps(workflowdefinition)
