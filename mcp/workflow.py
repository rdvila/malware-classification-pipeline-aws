import json
def get_workflow():
    ############################### Scheduler ###############################
    start_scheduler_task={
        "Type": "Task",
        "Resource": "arn:aws:states:::aws-sdk:ecs:runTask",
        "Parameters":{
            "Cluster": "${cluster}",
            "Count": 1,
            "NetworkConfiguration": {
                "AwsvpcConfiguration": {
                    "Subnets": ["${subnet1}", "${subnet2}"],
                    "SecurityGroups": ["${securitygroup}"],
                    "AssignPublicIp": "ENABLED"
                }
            },
            "Overrides": {
                "ContainerOverrides": [
                    {
                        "Name": "dask",
                        "Command": ["dask-scheduler","--port","8000","--dashboard-address","8001"]}
                ]
            },
            "TaskDefinition": "${taskdefinition}"
        },
        "ResultSelector":{
          "SchedulerArn.$": "$.Tasks[0].TaskArn",
          "DesiredStatus": {
              "Value.$": "$.Tasks[0].DesiredStatus"
          }
        },
        "ResultPath": "$.Scheduler"
    }
    
    stop_scheduler_task = {
        "Type": "Task",
        "Resource": "arn:aws:states:::aws-sdk:ecs:stopTask",
        "InputPath": "$.Scheduler",
        "Parameters":{
            "Cluster": "${cluster}",
            "Task.$": "$.SchedulerArn",
            "Reason": "Stoped by stepfunction"
        },
        "ResultSelector": {
          "Value.$": "$.Task.DesiredStatus"
        },
        "ResultPath": "$.Scheduler.DesiredStatus"
    }
    
    get_scheduler_status={
        "Type": "Task",
        "Resource": "arn:aws:states:::aws-sdk:ecs:describeTasks",
        "InputPath": "$.Scheduler",
        "Parameters":{
            "Cluster": "${cluster}",
            "Tasks.$": "States.Array($.SchedulerArn)"
        },
        "ResultSelector": {
          "Value.$": "$.Tasks[0].LastStatus"
        },
        "ResultPath": "$.Scheduler.Status"
    }
    
    wait_10_seconds = {
        "Type": "Wait",
        "Seconds": 10,
    }
    
    is_scheduler_running={
        "Variable": "$.Scheduler.Status.Value",
        "StringEquals": "RUNNING"
    }
    
    is_scheduler_stoped={
        "Variable": "$.Scheduler.Status.Value",
        "StringEquals": "STOPPED"
    }
    
    get_scheduler_ip={
        "Type": "Task",
        "Resource": "arn:aws:states:::aws-sdk:ecs:describeTasks",
        "InputPath": "$.Scheduler",
        "Parameters":{
            "Cluster": "${cluster}",
            "Tasks.$": "States.Array($.SchedulerArn)"
        },
        "ResultSelector": {
          "Value.$": "$.Tasks[0].Containers[0].NetworkInterfaces[0].PrivateIpv4Address"
        },
        "ResultPath": "$.Scheduler.Ip"   
    }
    ############################### Scheduler ###############################
    
    wait_30_seconds = {
        "Type": "Wait",
        "Seconds": 30,
    }
    
    ############################### Workers ###############################
    ############################### Workers ###############################
    
    ############################### Definition ###############################
    workflowdefinition={
        "StartAt": "start scheduler task",
        "States": {
            "start scheduler task":{ 
                **start_scheduler_task,
                "Next": "get scheduler running status"
            },
            "get scheduler running status": {
                **get_scheduler_status,
                "Next": "is scheduler running"
            },
            "wait 10 seconds to get scheduler running status": {
                **wait_10_seconds,
                "Next": "get scheduler running status"
            },
            "is scheduler running": {
                "Type": "Choice",
                "Default": "wait 10 seconds to get scheduler running status",
                "Choices": [
                    {
                        **is_scheduler_running,
                        "Next": "get scheduler ip"
                    }
                ]
                
            },
            "get scheduler ip": {
                **get_scheduler_ip,
                "Next": "wait 30 seconds"
            },
            "wait 30 seconds": {
                **wait_30_seconds,
                "Next": "stop scheduler task"
            },
            "stop scheduler task": {
                **stop_scheduler_task,
                "Next": "get scheduler stop status"
            },
            "get scheduler stop status": {
                **get_scheduler_status,
                "Next": "is scheduler stoped"
            },
            "is scheduler stoped": {
                "Type": "Choice",
                "Default": "wait 10 seconds to get scheduler stop status",
                "Choices": [
                    {
                        **is_scheduler_stoped,
                        "Next": "success"
                    }
                ]
                
            },
            "wait 10 seconds to get scheduler stop status": {
                **wait_10_seconds,
                "Next": "get scheduler stop status"
            },
            "success": {
                "Type": "Succeed"
            }
        }
    }
    ############################### Definition ###############################
    
    return json.dumps(workflowdefinition)
