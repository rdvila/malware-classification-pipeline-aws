from troposphere.stepfunctions import StateMachine

from troposphere import (
    GetAtt,
    GetAZs,
    Join,
    Output,
    Parameter,
    Ref,
    Select,
    Tags,
    Template,
)

from troposphere.iam import (
    InstanceProfile,
    PolicyType,
    Role
)

from workflow import get_workflow

t = Template()
t.set_version("2010-09-09")
t.set_transform('AWS::Serverless-2016-10-31')

pipelinerole=t.add_resource(
    Role(
        "PipelineRole",
        AssumeRolePolicyDocument={
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Action": "sts:AssumeRole",
                    "Principal": {"Service": ["states.amazonaws.com"]},
                    "Effect": "Allow",
                },
            ],
        },
        Path="/"
    )
)

pipelinepolicy=t.add_resource(
    PolicyType(
        "PipelinePolicy",
        PolicyName="PipelinePolicy",
        PolicyDocument={
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Action": [
                        "sagemaker:*",
                        "iam:PassRole"
                    ],
                    "Resource": ["*"],
                    "Effect": "Allow",
                    "Sid": "AllowRun",
                },
                {
                    "Action": [
                        "logs:CreateLogGroup",
                        "logs:CreateLogStream",
                        "logs:PutLogEvents"
                    ],
                    "Resource": ["*"],
                    "Effect": "Allow",
                    "Sid": "AllowLogs",
                },
            ],
        },
        Roles=[Ref("PipelineRole")],
    )
)

pipeline=t.add_resource(StateMachine(
    'Pipeline',
    StateMachineName='malware-classification-pipeline',
    StateMachineType='STANDARD',
    RoleArn=GetAtt(pipelinerole, "Arn"),
    DefinitionString=get_workflow(),
    #DefinitionSubstitutions={
    #}
))

with open('pipeline.yml', 'w') as f:
    f.write(t.to_yaml())


