from troposphere import (
    Base64,
    FindInMap,
    GetAtt,
    GetAZs,
    Join,
    Output,
    Parameter,
    Ref,
    Select,
    Tags,
    Template,
)
from troposphere.ec2 import (
    EIP,
    VPC,
    Instance,
    InternetGateway,
    NetworkAcl,
    NetworkAclEntry,
    NetworkInterfaceProperty,
    PortRange,
    Route,
    RouteTable,
    SecurityGroup,
    SecurityGroupIngress,
    SecurityGroupRule,
    Subnet,
    SubnetNetworkAclAssociation,
    SubnetRouteTableAssociation,
    VPCGatewayAttachment,
)
from troposphere.ecs import (
    AwsvpcConfiguration,
    Cluster,
    ContainerDefinition,
    NetworkConfiguration,
    PortMapping,
    Service,
    TaskDefinition,
    CapacityProviderStrategyItem
)

t = Template()
t.set_version("2010-09-09")

vpc = t.add_resource(
    VPC(
        "VPC",
        CidrBlock = "10.192.0.0/16",
        EnableDnsHostnames=True,
        EnableDnsSupport=True,
        Tags=Tags(CreatedBy='malware-classification-pipeline'),
    )
)

privatesubnet1 = t.add_resource(
    Subnet(
        "PrivateSubnet1",
        CidrBlock="10.192.10.0/24",
        VpcId=Ref(vpc),
        AvailabilityZone=Select(0, GetAZs('')),
        MapPublicIpOnLaunch=False,
        Tags=Tags(CreatedBy='malware-classification-pipeline'),
    )
)

privatesubnet2 = t.add_resource(
    Subnet(
        "PrivateSubnet2",
        CidrBlock="10.192.11.0/24",
        VpcId=Ref(vpc),
        AvailabilityZone=Select(1, GetAZs('')),
        MapPublicIpOnLaunch=False,
        Tags=Tags(CreatedBy='malware-classification-pipeline'),
    )
)

privateroutetable1=t.add_resource(
    RouteTable(
        "PrivateRouteTable1",
        VpcId=Ref(vpc),
        Tags=Tags(CreatedBy='malware-classification-pipeline'),
    )
)

privateroutetable2=t.add_resource(
    RouteTable(
        "PrivateRouteTable2",
        VpcId=Ref(vpc),
        Tags=Tags(CreatedBy='malware-classification-pipeline'),
    )
)

privroutetableassociation1=t.add_resource(
    SubnetRouteTableAssociation(
        "PrivateSubnet1RouteTableAssociation",
        RouteTableId=Ref(privateroutetable1),
        SubnetId=Ref(privatesubnet1)
    )
)

privroutetableassociation2=t.add_resource(
    SubnetRouteTableAssociation(
        "PrivateSubnet2RouteTableAssociation",
        RouteTableId=Ref(privateroutetable2),
        SubnetId=Ref(privatesubnet2),
    )
)

cluster=t.add_resource(
    Cluster(
        "MalwareClassificationCluster",
        ClusterName="malware_classification_cluster",
        CapacityProviders=["FARGATE", "FARGATE_SPOT"],
        DefaultCapacityProviderStrategy=[
            CapacityProviderStrategyItem(
                Base=2,
                CapacityProvider="FARGATE",
                Weight=1
            ),
            CapacityProviderStrategyItem(
                Base=0,
                CapacityProvider="FARGATE_SPOT",
                Weight=3
            )
        ],
        Tags=Tags(CreatedBy='malware-classification-pipeline'),
    )
)


clustersecuritygroup=t.add_resource(
    SecurityGroup(
        "ClusterSecurityGroup",
        GroupDescription="Cluster default security group",
        VpcId=Ref(vpc),
        Tags=Tags(CreatedBy='malware-classification-pipeline'),
    )
)

clustersecuritygroupingress=t.add_resource(
    SecurityGroupIngress(
        "ClusterSecurityGroupIngress",
        GroupId=Ref(clustersecuritygroup),
        IpProtocol="tcp",
        FromPort=8000,
        ToPort=8001,
        SourceSecurityGroupId=Ref(clustersecuritygroup),
        DependsOn="ClusterSecurityGroup",
    )
)

with open('cluster.yml', 'w') as f:
    f.write(t.to_yaml())


