AWSTemplateFormatVersion: '2010-09-09'
Resources:
  AttachGateway:
    Properties:
      InternetGatewayId: !Ref 'InternetGateway'
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::VPCGatewayAttachment
  ClusterPlacementGroup:
    Properties:
      Strategy: cluster
    Type: AWS::EC2::PlacementGroup
  ClusterSecurityGroup:
    Properties:
      GroupDescription: Cluster default security group
      Tags:
        - Key: CreatedBy
          Value: data-science-pipeline
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::SecurityGroup
  ClusterSecurityGroupIngress:
    DependsOn: ClusterSecurityGroup
    Properties:
      FromPort: 8000
      GroupId: !Ref 'ClusterSecurityGroup'
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref 'ClusterSecurityGroup'
      ToPort: 8200
    Type: AWS::EC2::SecurityGroupIngress
  DataScienceComputeEnvironment:
    Properties:
      ComputeEnvironmentName: data-science-compute-environment-cpu
      ComputeResources:
        DesiredvCpus: 0
        InstanceRole: !Ref 'InstanceRole'
        InstanceTypes:
          - c5
          - c5a
        MaxvCpus: 128
        MinvCpus: 0
        PlacementGroup: !Ref 'ClusterPlacementGroup'
        SecurityGroupIds:
          - !GetAtt 'ClusterSecurityGroup.GroupId'
        Subnets:
          - !Ref 'PublicSubnet1'
        Type: EC2
      State: ENABLED
      Type: MANAGED
    Type: AWS::Batch::ComputeEnvironment
  EvaluationJobQueue:
    Properties:
      ComputeEnvironmentOrder:
        - ComputeEnvironment: !Ref 'DataScienceComputeEnvironment'
          Order: 0
      JobQueueName: evaluation-job-queue
      Priority: 4
      State: ENABLED
    Type: AWS::Batch::JobQueue
  Generator:
    Properties:
      Code:
        ZipFile: "\ndef handler(event, context):\n    print(event)\n    return {\n        \"Iterator\": [\"I\"] * min(500, max(event.get(\"Range\", 1), 1))\n    }\n"
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt 'LambdaRole.Arn'
      Runtime: python3.9
      Timeout: 3
    Type: AWS::Lambda::Function
  InstancePolicy:
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ec2:DescribeTags
              - ecs:CreateCluster
              - ecs:DeregisterContainerInstance
              - ecs:DiscoverPollEndpoint
              - ecs:Poll
              - ecs:RegisterContainerInstance
              - ecs:StartTelemetrySession
              - ecs:UpdateContainerInstancesState
              - ecs:Submit*
              - ecr:GetAuthorizationToken
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
            Effect: Allow
            Resource:
              - '*'
            Sid: AllowPull
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              - '*'
            Sid: AllowLogs
        Version: '2012-10-17'
      PolicyName: DaskExecutionPolicy
      Roles:
        - !Ref 'InstanceRole'
    Type: AWS::IAM::Policy
  InstanceRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
        Version: '2012-10-17'
      Path: /
    Type: AWS::IAM::Role
  InternetGateway:
    Properties:
      Tags:
        - Key: CreatedBy
          Value: data-science-pipeline
        - Key: Name
          Value: InternetGateway - Data Science Pipeline
    Type: AWS::EC2::InternetGateway
  LambdaPolicy:
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:*
            Effect: Allow
            Resource: arn:aws:logs:*:*:*
        Version: '2012-10-17'
      PolicyName: LambdaPolicy
      Roles:
        - !Ref 'LambdaRole'
    Type: AWS::IAM::Policy
  LambdaRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: '2012-10-17'
      Path: /
    Type: AWS::IAM::Role
  OptimizationJobQueue:
    Properties:
      ComputeEnvironmentOrder:
        - ComputeEnvironment: !Ref 'DataScienceComputeEnvironment'
          Order: 0
      JobQueueName: optimization-job-queue
      Priority: 3
      State: ENABLED
    Type: AWS::Batch::JobQueue
  PipelinePolicy:
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ecs:*
              - lambda:*
              - iam:PassRole
            Effect: Allow
            Resource:
              - '*'
            Sid: AllowRun
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              - '*'
            Sid: AllowLogs
        Version: '2012-10-17'
      PolicyName: PipelinePolicy
      Roles:
        - !Ref 'PipelineRole'
    Type: AWS::IAM::Policy
  PipelineRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
        Version: '2012-10-17'
      Path: /
    Type: AWS::IAM::Role
  ProcessingJobQueue:
    Properties:
      ComputeEnvironmentOrder:
        - ComputeEnvironment: !Ref 'DataScienceComputeEnvironment'
          Order: 0
      JobQueueName: processing-job-queue
      Priority: 1
      State: ENABLED
    Type: AWS::Batch::JobQueue
  PublicRouteTable1:
    Properties:
      Tags:
        - Key: CreatedBy
          Value: data-science-pipeline
        - Key: Name
          Value: PublicRouteTable1 - Data Science Pipeline
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::RouteTable
  PublicSubnet1:
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: 10.192.10.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: CreatedBy
          Value: data-science-pipeline
        - Key: Name
          Value: PublicSubnet1 - Data Science Pipeline
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::Subnet
  PublicSubnet1RouteTableAssociation:
    Properties:
      RouteTableId: !Ref 'PublicRouteTable1'
      SubnetId: !Ref 'PublicSubnet1'
    Type: AWS::EC2::SubnetRouteTableAssociation
  RoutePublic1:
    DependsOn: AttachGateway
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
      RouteTableId: !Ref 'PublicRouteTable1'
    Type: AWS::EC2::Route
  TrainingJobQueue:
    Properties:
      ComputeEnvironmentOrder:
        - ComputeEnvironment: !Ref 'DataScienceComputeEnvironment'
          Order: 0
      JobQueueName: training-job-queue
      Priority: 2
      State: ENABLED
    Type: AWS::Batch::JobQueue
  VPC:
    Properties:
      CidrBlock: 10.192.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: CreatedBy
          Value: data-science-pipeline
        - Key: Name
          Value: VPC - Data Science Pipeline
    Type: AWS::EC2::VPC
Transform: AWS::Serverless-2016-10-31
