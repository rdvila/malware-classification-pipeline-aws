AWSTemplateFormatVersion: '2010-09-09'
Resources:
  AttachGateway:
    Properties:
      InternetGatewayId: !Ref 'InternetGateway'
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::VPCGatewayAttachment
  ClusterSecurityGroup:
    Properties:
      GroupDescription: Cluster default security group
      Tags:
        - Key: CreatedBy
          Value: data-science-pipeline
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::SecurityGroup
  ClusterSecurityGroupIngress:
    DependsOn: ClusterSecurityGroup
    Properties:
      FromPort: 8000
      GroupId: !Ref 'ClusterSecurityGroup'
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref 'ClusterSecurityGroup'
      ToPort: 8200
    Type: AWS::EC2::SecurityGroupIngress
  DaskExecutionPolicy:
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ecr:GetAuthorizationToken
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
            Effect: Allow
            Resource:
              - '*'
            Sid: AllowPull
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              - '*'
            Sid: AllowLogs
        Version: '2012-10-17'
      PolicyName: DaskExecutionPolicy
      Roles:
        - !Ref 'DaskExecutionRole'
    Type: AWS::IAM::Policy
  DaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
        Version: '2012-10-17'
      Path: /
    Type: AWS::IAM::Role
  DaskPolicy:
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ecs:*
              - iam:PassRole
            Effect: Allow
            Resource:
              - '*'
            Sid: AllowRun
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              - '*'
            Sid: AllowLogs
        Version: '2012-10-17'
      PolicyName: DaskPolicy
      Roles:
        - !Ref 'DaskTaskRole'
    Type: AWS::IAM::Policy
  DaskTaskDefinition:
    Properties:
      ContainerDefinitions:
        - Essential: true
          HealthCheck:
            Command:
              - CMD-SHELL
              - pidof tini || exit 1
            Interval: 15
            Retries: 10
            StartPeriod: 30
            Timeout: 10
          Image: !Join
            - .
            - - !Ref 'AWS::AccountId'
              - dkr
              - ecr
              - !Ref 'AWS::Region'
              - amazonaws
              - com/malware-classification-repository:latest
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-create-group: 'true'
              awslogs-group: data-science-pipeline-cluster
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: dask-
          Name: dask
          PortMappings:
            - ContainerPort: 8000
              HostPort: 8000
              Protocol: tcp
            - ContainerPort: 8001
              HostPort: 8001
              Protocol: tcp
          Ulimits:
            - HardLimit: 102400
              Name: nofile
              SoftLimit: 102400
      Cpu: '2048'
      EphemeralStorage:
        SizeInGiB: 60
      ExecutionRoleArn: !GetAtt 'DaskExecutionRole.Arn'
      Family: dask-family
      Memory: '4096'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      RuntimePlatform:
        CpuArchitecture: X86_64
        OperatingSystemFamily: LINUX
      Tags:
        - Key: CreatedBy
          Value: data-science-pipeline
      TaskRoleArn: !GetAtt 'DaskTaskRole.Arn'
    Type: AWS::ECS::TaskDefinition
  DaskTaskRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
                - states.amazonaws.com
        Version: '2012-10-17'
      Path: /
    Type: AWS::IAM::Role
  DataScienceCluster:
    Properties:
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      ClusterName: data-science-cluster
      DefaultCapacityProviderStrategy:
        - Base: 2
          CapacityProvider: FARGATE
          Weight: 1
        - Base: 0
          CapacityProvider: FARGATE_SPOT
          Weight: 3
      Tags:
        - Key: CreatedBy
          Value: data-science-pipeline
    Type: AWS::ECS::Cluster
  InternetGateway:
    Properties:
      Tags:
        - Key: CreatedBy
          Value: data-science-pipeline
        - Key: Name
          Value: InternetGateway - Data Science Pipeline
    Type: AWS::EC2::InternetGateway
  Pipeline:
    Properties:
      DefinitionString: >-
        {"StartAt": "validate parameters", "States": {"validate parameters": {"Type": "Choice", "Default": "parameter validation failed", "Choices": [{"And": [{"Variable": "$.WorkersCount", "IsPresent":
        true}, {"Variable": "$.WorkersCount", "IsNumeric": true}, {"Variable": "$.WorkersCount", "NumericGreaterThan": 0}, {"Variable": "$.WorkersCount", "NumericLessThanEquals": 10}, {"Variable": "$.SkipScheduler",
        "IsPresent": true}, {"Variable": "$.SkipScheduler", "IsBoolean": true}, {"Variable": "$.SkipWorkers", "IsPresent": true}, {"Variable": "$.SkipWorkers", "IsBoolean": true}, {"Variable": "$.SkipWorkersStop",
        "IsPresent": true}, {"Variable": "$.SkipWorkersStop", "IsBoolean": true}, {"Variable": "$.SkipSchedulerStop", "IsPresent": true}, {"Variable": "$.SkipSchedulerStop", "IsBoolean": true}], "Next":
        "skip scheduler?"}]}, "parameter validation failed": {"Type": "Fail", "Cause": "Invalid Parameters", "Error": "INVALID_PARAMETERS"}, "skip scheduler?": {"Type": "Choice", "Default": "start scheduler
        task", "Choices": [{"Variable": "$.SkipScheduler", "BooleanEquals": true, "Next": "skip workers?"}]}, "start scheduler task": {"Type": "Task", "Resource": "arn:aws:states:::aws-sdk:ecs:runTask",
        "Parameters": {"Cluster": "${cluster}", "Count": 1, "NetworkConfiguration": {"AwsvpcConfiguration": {"Subnets": ["${subnet1}", "${subnet2}"], "SecurityGroups": ["${securitygroup}"], "AssignPublicIp":
        "ENABLED"}}, "Overrides": {"ContainerOverrides": [{"Name": "dask", "Command": ["dask-scheduler", "--port", "8000", "--dashboard-address", "8001"]}]}, "TaskDefinition": "${taskdefinition}"}, "ResultSelector":
        {"SchedulerArn.$": "$.Tasks[0].TaskArn", "DesiredStatus": {"Value.$": "$.Tasks[0].DesiredStatus"}}, "ResultPath": "$.Scheduler", "Next": "get scheduler running status"}, "get scheduler running status":
        {"Type": "Task", "Resource": "arn:aws:states:::aws-sdk:ecs:describeTasks", "InputPath": "$.Scheduler", "Parameters": {"Cluster": "${cluster}", "Tasks.$": "States.Array($.SchedulerArn)"}, "ResultSelector":
        {"Value.$": "$.Tasks[0].LastStatus"}, "ResultPath": "$.Scheduler.Status", "Next": "is scheduler running"}, "wait 10 seconds to get scheduler running status": {"Type": "Wait", "Seconds": 10, "Next":
        "get scheduler running status"}, "is scheduler running": {"Type": "Choice", "Default": "wait 10 seconds to get scheduler running status", "Choices": [{"Variable": "$.Scheduler.Status.Value", "StringEquals":
        "RUNNING", "Next": "get scheduler endpoint"}]}, "get scheduler endpoint": {"Type": "Task", "Resource": "arn:aws:states:::aws-sdk:ecs:describeTasks", "InputPath": "$.Scheduler", "Parameters": {"Cluster":
        "${cluster}", "Tasks.$": "States.Array($.SchedulerArn)"}, "ResultSelector": {"Value.$": "States.Format('tcp://{}:8000', $.Tasks[0].Containers[0].NetworkInterfaces[0].PrivateIpv4Address)"}, "ResultPath":
        "$.Scheduler.Endpoint", "Next": "skip workers?"}, "skip workers?": {"Type": "Choice", "Default": "start workers tasks", "Choices": [{"Variable": "$.SkipWorkers", "BooleanEquals": true, "Next": "wait
        30 seconds"}]}, "start workers tasks": {"Type": "Task", "Resource": "arn:aws:states:::aws-sdk:ecs:runTask", "Parameters": {"Cluster": "${cluster}", "Count.$": "$.WorkersCount", "NetworkConfiguration":
        {"AwsvpcConfiguration": {"Subnets": ["${subnet1}", "${subnet2}"], "SecurityGroups": ["${securitygroup}"], "AssignPublicIp": "ENABLED"}}, "Overrides": {"ContainerOverrides": [{"Name": "dask", "Command.$":
        "States.Array('dask-worker', '--dashboard-address', '8000', '--nanny-port', '8001:8100', '--worker-port', '8100:8200', $.Scheduler.Endpoint.Value)"}]}, "TaskDefinition": "${taskdefinition}"}, "ResultSelector":
        {"WorkersArn.$": "$.Tasks[*].TaskArn", "Status": {"Value.$": "$.Tasks[*].LastStatus"}, "DesiredStatus": {"Value.$": "$.Tasks[*].DesiredStatus"}}, "ResultPath": "$.Workers", "Next": "validate workers"},
        "validate workers": {"Type": "Map", "InputPath": "$.Workers", "ItemsPath": "$.WorkersArn", "MaxConcurrency": 1, "Parameters": {"TaskArn.$": "$$.Map.Item.Value", "Cluster": "${cluster}"}, "Iterator":
        {"StartAt": "get worker status", "States": {"get worker status": {"Type": "Task", "Resource": "arn:aws:states:::aws-sdk:ecs:describeTasks", "Parameters": {"Cluster": "${cluster}", "Tasks.$": "States.Array($.TaskArn)"},
        "ResultSelector": {"Value.$": "$.Tasks[0].LastStatus"}, "ResultPath": "$.Status", "Next": "is worker running"}, "is worker running": {"Type": "Choice", "Default": "wait 10 seconds to get worker
        running status", "Choices": [{"Variable": "$.Status.Value", "StringEquals": "RUNNING", "Next": "worker is running"}]}, "wait 10 seconds to get worker running status": {"Type": "Wait", "Seconds":
        10, "Next": "get worker status"}, "worker is running": {"Type": "Pass", "End": true}}}, "ResultSelector": {"Value.$": "$[*].Status.Value"}, "ResultPath": "$.Workers.Status", "Next": "wait 30 seconds"},
        "wait 30 seconds": {"Type": "Wait", "Seconds": 30, "Next": "skip workers stop?"}, "skip workers stop?": {"Type": "Choice", "Default": "stop workers tasks", "Choices": [{"Variable": "$.SkipWorkersStop",
        "BooleanEquals": true, "Next": "skip scheduler stop?"}]}, "stop workers tasks": {"Type": "Map", "InputPath": "$.Workers", "ItemsPath": "$.WorkersArn", "MaxConcurrency": 1, "Parameters": {"TaskArn.$":
        "$$.Map.Item.Value", "Cluster": "${cluster}"}, "Iterator": {"StartAt": "stop worker", "States": {"stop worker": {"Type": "Task", "Resource": "arn:aws:states:::aws-sdk:ecs:stopTask", "Parameters":
        {"Cluster": "${cluster}", "Task.$": "$.TaskArn", "Reason": "Stoped by stepfunction"}, "ResultSelector": {"Value.$": "$.Task.DesiredStatus"}, "ResultPath": "$.DesiredStatus", "End": true}}}, "ResultSelector":
        {"Value.$": "$[*].DesiredStatus.Value"}, "ResultPath": "$.Workers.DesiredStatus", "Next": "validate stopped workers"}, "validate stopped workers": {"Type": "Map", "InputPath": "$.Workers", "ItemsPath":
        "$.WorkersArn", "MaxConcurrency": 1, "Parameters": {"TaskArn.$": "$$.Map.Item.Value", "Cluster": "${cluster}"}, "Iterator": {"StartAt": "get worker stopped status", "States": {"get worker stopped
        status": {"Type": "Task", "Resource": "arn:aws:states:::aws-sdk:ecs:describeTasks", "Parameters": {"Cluster": "${cluster}", "Tasks.$": "States.Array($.TaskArn)"}, "ResultSelector": {"Value.$": "$.Tasks[0].LastStatus"},
        "ResultPath": "$.Status", "Next": "is worker stopped"}, "is worker stopped": {"Type": "Choice", "Default": "wait 10 seconds to get worker stopped status", "Choices": [{"Variable": "$.Status.Value",
        "StringEquals": "STOPPED", "Next": "worker is stopped"}]}, "wait 10 seconds to get worker stopped status": {"Type": "Wait", "Seconds": 10, "Next": "get worker stopped status"}, "worker is stopped":
        {"Type": "Pass", "End": true}}}, "ResultSelector": {"Value.$": "$[*].Status.Value"}, "ResultPath": "$.Workers.Status", "Next": "skip scheduler stop?"}, "skip scheduler stop?": {"Type": "Choice",
        "Default": "stop scheduler task", "Choices": [{"Variable": "$.SkipSchedulerStop", "BooleanEquals": true, "Next": "success"}]}, "stop scheduler task": {"Type": "Task", "Resource": "arn:aws:states:::aws-sdk:ecs:stopTask",
        "InputPath": "$.Scheduler", "Parameters": {"Cluster": "${cluster}", "Task.$": "$.SchedulerArn", "Reason": "Stoped by stepfunction"}, "ResultSelector": {"Value.$": "$.Task.DesiredStatus"}, "ResultPath":
        "$.Scheduler.DesiredStatus", "Next": "get scheduler stop status"}, "get scheduler stop status": {"Type": "Task", "Resource": "arn:aws:states:::aws-sdk:ecs:describeTasks", "InputPath": "$.Scheduler",
        "Parameters": {"Cluster": "${cluster}", "Tasks.$": "States.Array($.SchedulerArn)"}, "ResultSelector": {"Value.$": "$.Tasks[0].LastStatus"}, "ResultPath": "$.Scheduler.Status", "Next": "is scheduler
        stoped"}, "is scheduler stoped": {"Type": "Choice", "Default": "wait 10 seconds to get scheduler stop status", "Choices": [{"Variable": "$.Scheduler.Status.Value", "StringEquals": "STOPPED", "Next":
        "success"}]}, "wait 10 seconds to get scheduler stop status": {"Type": "Wait", "Seconds": 10, "Next": "get scheduler stop status"}, "success": {"Type": "Succeed"}}}
      DefinitionSubstitutions:
        cluster: !Ref 'DataScienceCluster'
        securitygroup: !Ref 'ClusterSecurityGroup'
        subnet1: !Ref 'PublicSubnet1'
        subnet2: !Ref 'PublicSubnet2'
        taskdefinition: !Ref 'DaskTaskDefinition'
      RoleArn: !GetAtt 'DaskTaskRole.Arn'
      StateMachineName: data-science-pipeline
      StateMachineType: STANDARD
    Type: AWS::StepFunctions::StateMachine
  PublicRouteTable1:
    Properties:
      Tags:
        - Key: CreatedBy
          Value: data-science-pipeline
        - Key: Name
          Value: PublicRouteTable1 - Data Science Pipeline
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::RouteTable
  PublicRouteTable2:
    Properties:
      Tags:
        - Key: CreatedBy
          Value: data-science-pipeline
        - Key: Name
          Value: PublicRouteTable2 - Data Science Pipeline
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::RouteTable
  PublicSubnet1:
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: 10.192.10.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: CreatedBy
          Value: data-science-pipeline
        - Key: Name
          Value: PublicSubnet1 - Data Science Pipeline
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::Subnet
  PublicSubnet1RouteTableAssociation:
    Properties:
      RouteTableId: !Ref 'PublicRouteTable1'
      SubnetId: !Ref 'PublicSubnet1'
    Type: AWS::EC2::SubnetRouteTableAssociation
  PublicSubnet2:
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      CidrBlock: 10.192.11.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: CreatedBy
          Value: data-science-pipeline
        - Key: Name
          Value: PublicSubnet2 - Data Science Pipeline
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::Subnet
  PublicSubnet2RouteTableAssociation:
    Properties:
      RouteTableId: !Ref 'PublicRouteTable2'
      SubnetId: !Ref 'PublicSubnet2'
    Type: AWS::EC2::SubnetRouteTableAssociation
  RoutePublic1:
    DependsOn: AttachGateway
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
      RouteTableId: !Ref 'PublicRouteTable1'
    Type: AWS::EC2::Route
  RoutePublic2:
    DependsOn: AttachGateway
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
      RouteTableId: !Ref 'PublicRouteTable2'
    Type: AWS::EC2::Route
  VPC:
    Properties:
      CidrBlock: 10.192.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: CreatedBy
          Value: data-science-pipeline
        - Key: Name
          Value: VPC - Data Science Pipeline
    Type: AWS::EC2::VPC
Transform: AWS::Serverless-2016-10-31
